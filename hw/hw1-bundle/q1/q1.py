# -*- coding: utf-8 -*-
"""cs246_hw1_q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SQ3gbXzohGxI30WXFl9aUOs91-J12Nir
"""

!pip install pyspark
!pip install -U -q PyDrive
!apt install openjdk-8-jdk-headless -qq
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark import SparkContext
import pandas as pd

# create the Spark Session
spark = SparkSession.builder.getOrCreate()

# create the Spark Context
sc = spark.sparkContext

data = sc.textFile('soc-LiveJournal1Adj.txt')

def make_tuple(line):
  tokens = line.split('\t')

  if len(tokens) == 1 or tokens[0] == '':
    return []

  user = int(tokens[0])
  friends = tokens[1].split(',')

  user_friend_pairs = []
  mutual_friend_pairs = []

  for friend in friends:
    if friend != '':
      user_friend_pairs.append(((user, int(friend)), 0))

  for i in range(0, len(friends) - 1):
    for j in range(i + 1, len(friends)):
      mutual_friend_pairs.append(((int(friends[i]), int(friends[j])), 1))
      mutual_friend_pairs.append(((int(friends[j]), int(friends[i])), 1))

  return user_friend_pairs + mutual_friend_pairs

relationship_pairs = data.flatMap(lambda line: make_tuple(line))

already_friends = relationship_pairs.filter(lambda relationship: relationship[1] == 0)

mutual_friends_pairs = relationship_pairs.subtractByKey(already_friends).\
                       reduceByKey(lambda a, b: a + b).\
                       map(lambda x: (x[0][0], (x[0][1], x[1]))).\
                       groupByKey().\
                       mapValues(list)

def recommend_new_friends(user_and_strangers, n = 10):
  user, list_of_strangers = user_and_strangers

  ordered_strangers_list = sorted(list_of_strangers, key = lambda stranger_num_mutual_friends: (-stranger_num_mutual_friends[1], stranger_num_mutual_friends[0]))[:n]

  #recommendation = map(lambda stranger_num_mutual_friends: stranger_num_mutual_friends[0], ordered_strangers_list)
  recommendation = []
  for k, v in ordered_strangers_list:
    recommendation.append(k)

  return user, recommendation

result = mutual_friends_pairs.map(lambda user_and_strangers: recommend_new_friends(user_and_strangers)).\
         map(lambda user_recommendations: "{}\t{}".format(user_recommendations[0], ",".join(map(lambda x: str(x), user_recommendations[1])))).\
         collect()

user_IDs = ['924', '8941', '8942', '9019', '9020', '9021', '9022', '9990', '9992', '9993']

for user_id in user_IDs:
  for line in result:
    user, recommendations = line.split('\t')
    if user == user_id:
      print(line)
